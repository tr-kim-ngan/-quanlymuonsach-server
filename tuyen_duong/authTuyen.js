const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken'); 
const NhanVien = require('../mo_hinh/NhanVien');
const DocGia = require('../mo_hinh/DocGia');
const tuyen = express.Router();

const JWT_SECRET = 'your_jwt_secret_key';


// ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
tuyen.post('/register', async (req, res) => {
  try {
     
    const { username, Password, role, HoLot, Ten, NgaySinh, Phai, DiaChi, DienThoai } = req.body;
    console.log("Payload nh·∫≠n t·ª´ client:", req.body);
    console.log("Password nh·∫≠n ƒë∆∞·ª£c:", Password); // Ki·ªÉm tra gi√° tr·ªã password nh·∫≠n t·ª´ client

    if (!Password) {
    return res.status(400).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng." });
    }

  
    const hashedPassword = await bcrypt.hash(Password, 10);

    let newUser;
    if (role === 'admin') {
       newUser = new NhanVien({
        HoTenNV: username,
        Password: hashedPassword,
        ChucVu: 'Admin',
        role: 'admin'
        
      });
    } else {
      newUser = new DocGia({
        username,
        HoLot,
        Ten,
        NgaySinh,
        Phai,
        DiaChi,
        DienThoai,
        Password: hashedPassword,
        role: 'customer'
      });
    }

    await newUser.save();
    res.status(201).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng! ü•≥' });
  } catch (error) {
    console.error("ƒêƒÉng k√Ω th·∫•t b·∫°i:", error);
    res.status(400).json({ message: 'T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i, vui l√≤ng nh·∫≠p t√™n kh√°c üòî', error });

  }
});


// ƒêƒÉng nh·∫≠p
tuyen.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng l√† nh√¢n vi√™n hay ƒë·ªôc gi·∫£
    let user = await NhanVien.findOne({ username });

    let role = 'customer'; // M·∫∑c ƒë·ªãnh l√† kh√°ch h√†ng

    if (!user) {
      user = await DocGia.findOne({ username });
    } else {
      role = 'admin';
    }

    if (!user) {
      return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
    }

    const isPasswordValid = await bcrypt.compare(password, user.Password);
    if (!isPasswordValid) {
      return res.status(401).json({ message: 'M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c' });
    }

    const token = jwt.sign({ id: user._id, role }, JWT_SECRET, { expiresIn: '1h' });

    // Tr·∫£ v·ªÅ th√™m th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng
    const userInfo = {
      id: user._id,
      token,
      role,
      userName: user.HoTenNV || user.Ten || username,
      userFullName: user.HoTenNV || `${user.HoLot} ${user.Ten}`,
      userEmail: user.Email || "", // N·∫øu c√≥ email trong model
      userPosition: user.ChucVu || "",
      userAddress: user.DiaChi || "",
      userPhone: user.DienThoai || user.SoDienThoai || "",
      userFirstName: user.HoLot || "", // H·ªç L√≥t cho kh√°ch h√†ng
      userLastName: user.Ten || "", // T√™n cho kh√°ch h√†ng
      userBirthDate: user.NgaySinh || "", // Ng√†y sinh cho kh√°ch h√†ng
      userGender: user.Phai || "" // Gi·ªõi t√≠nh cho kh√°ch h√†ng
    };
    
    res.json(userInfo);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói ƒëƒÉng nh·∫≠p', error });
  }
});


module.exports = tuyen;
